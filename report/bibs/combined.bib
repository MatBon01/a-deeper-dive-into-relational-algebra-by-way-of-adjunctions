@article{RelationalAlgebraByWayOfAdjunctions,
	author={Jeremy Gibbons and Fritz Henglein and Ralf Hinze and Nicolas Wu},
	year={2018},
	month={Jul 30,},
	title={Relational algebra by way of adjunctions},
	journal={Proceedings of ACM on programming languages},
	volume={2},
	number={ICFP},
	pages={1-28},
	abstract={Bulk types such as sets, bags, and lists are monads, and therefore support a notation for database queries based on comprehensions. This fact is the basis of much work on database query languages. The monadic structure easily explains most of standard relational algebra---specifically, selections and projections---allowing for an elegant mathematical foundation for those aspects of database query language design. Most, but not all: monads do not immediately offer an explanation of relational join or grouping, and hence important foundations for those crucial aspects of relational algebra are missing. The best they can offer is cartesian product followed by selection. Adjunctions come to the rescue: like any monad, bulk types also arise from certain adjunctions; we show that by paying due attention to other important adjunctions, we can elegantly explain the rest of standard relational algebra. In particular, graded monads provide a mathematical foundation for indexing and grouping, which leads directly to an efficient implementation, even of joins.},
	isbn={2475-1421},
	url={http://dl.acm.org/citation.cfm?id=3236781},
	doi={10.1145/3236781}
}
@article{RelationalAlgebraByWayOfAdjunctionsPrototypeImplementation,
	author={Jeremy Gibbons and Fritz Henglein and Ralf Hinze and Nicolas Wu},
	year={2018},
	month={Jul 30,},
	title={Relational algebra by way of adjunctions},
	journal={Proceedings of ACM on programming languages},
	volume={2},
	number={ICFP},
	pages={1-28},
	abstract={Bulk types such as sets, bags, and lists are monads, and therefore support a notation for database queries based on comprehensions. This fact is the basis of much work on database query languages. The monadic structure easily explains most of standard relational algebra---specifically, selections and projections---allowing for an elegant mathematical foundation for those aspects of database query language design. Most, but not all: monads do not immediately offer an explanation of relational join or grouping, and hence important foundations for those crucial aspects of relational algebra are missing. The best they can offer is cartesian product followed by selection. Adjunctions come to the rescue: like any monad, bulk types also arise from certain adjunctions; we show that by paying due attention to other important adjunctions, we can elegantly explain the rest of standard relational algebra. In particular, graded monads provide a mathematical foundation for indexing and grouping, which leads directly to an efficient implementation, even of joins.},
	isbn={2475-1421},
	url={http://dl.acm.org/citation.cfm?id=3236781},
	doi={10.1145/3236781}
}
@book{DatabaseSystems,
	author={Hector Garcia-Molina and Jeffrey Ullman and Jennifer Widom},
	year={2013},
	title={Database Systems : the Complete Book},
	publisher={Pearson Education UK},
	address={Harlow, Essex, England},
	edition={Second, Pearson New International edition.},
	abstract={For Database Systems and Database Design and Application courses offered at the junior, senior and graduate levels in Computer Science departments. Written by well-known computer scientists, this introduction to database systems offers a comprehensive approach, focusing on database design, database use, and implementation of database applications and database management systems. The first half of the book provides in-depth coverage of databases from the point of view of the database designer, user, and application programmer. It covers the latest database standards SQL:1999, SQL/PSM, SQL/CLI, JDBC, ODL, and XML, with broader coverage of SQL than most other texts. The second half of the book provides in-depth coverage of databases from the point of view of the DBMS implementor. It focuses on storage structures, query processing, and transaction management. The book covers the main techniques in these areas with broader coverage of query optimization than most other texts, along with advanced topics including multidimensional and bitmap indexes, distributed transactions, and information integration techniques.&nbsp;},
	isbn={9781292037301}
}
@inproceedings{RelationalCalculus,
	author={E. F. Codd},
	year={1971},
	title={A Data Base Sublanguage Founded on the Relational Calculus},
	booktitle={Proceedings of the 1971 ACM SIGFIDET (Now SIGMOD) Workshop on Data Description, Access and Control},
	series={SIGFIDET '71},
	publisher={Association for Computing Machinery},
	address={New York, NY, USA},
	location={San Diego, California},
	pages={35–68},
	abstract={Three principal types of language for data base manipulation are identified: the low-level, procedure-oriented (typified by the CODASYL-proposed DML), the intermediate level, algebraic (typified by the Project MAC MacAIMS language), and the high level, relational calculus-based data sublanguage, an example of which is described in this paper. The language description is informal and stresses concepts and principles. Following this, arguments are presented for the superiority of the calculus-based type of data base sub-language over the algebraic, and for the algebraic over the low-level procedural. These arguments are particularly relevant to the questions of inter-system compatibility and standardization.},
	isbn={9781-450373005},
	url={https://doi.org/10.1145/1734714.1734718},
	doi={10.1145/1734714.1734718}
}
@article{RelationalModel,
	author={E. F. Codd},
	year={1970},
	month={jun},
	title={A Relational Model of Data for Large Shared Data Banks},
	journal={Commun.ACM},
	volume={13},
	number={6},
	pages={377–387},
	abstract={Future users of large data banks must be protected from having to know how the data is organized in the machine (the internal representation). A prompting service which supplies such information is not a satisfactory solution. Activities of users at terminals and most application programs should remain unaffected when the internal representation of data is changed and even when some aspects of the external representation are changed. Changes in data representation will often be needed as a result of changes in query, update, and report traffic and natural growth in the types of stored information.Existing noninferential, formatted data systems provide users with tree-structured files or slightly more general network models of the data. In Section 1, inadequacies of these models are discussed. A model based on n-ary relations, a normal form for data base relations, and the concept of a universal data sublanguage are introduced. In Section 2, certain operations on relations (other than logical inference) are discussed and applied to the problems of redundancy and consistency in the user's model.},
	isbn={0001-0782},
	url={https://doi.org/10.1145/362384.362685},
	doi={10.1145/362384.362685}
}
@article{JoinProcessing,
	author={Priti Mishra and Margaret H. Eich},
	year={1992},
	month={mar},
	title={Join Processing in Relational Databases},
	journal={ACM Comput.Surv.},
	volume={24},
	number={1},
	pages={63–113},
	abstract={The join operation is one of the fundamental relational database query operations. It facilitates the retrieval of information from two different relations based on a Cartesian product of the two relations. The join is one of the most diffidult operations to implement efficiently, as no predefined links between relations are required to exist (as they are with network and hierarchical systems). The join is the only relational algebra operation that allows the combining of related tuples from relations on different attribute schemes. Since it is executed frequently and is expensive, much research effort has been applied to the optimization of join processing. In this paper, the different kinds of joins and the various implementation techniques are surveyed. These different methods are classified based on how they partition tuples from different relations. Some require that all tuples from one be compared to all tuples from another; other algorithms only compare some tuples from each. In addition, some techniques perform an explicit partitioning, whereas others are implicit.},
	isbn={0360-0300},
	url={https://doi.org/10.1145/128762.128764},
	doi={10.1145/128762.128764}
}
@article{CambridgeStructuralDatabase,
	author={Colin R. Groom and Ian J. Bruno and Matthew P. Lightfoot and Suzanna C. Ward},
	year={2016},
	month={APR},
	title={The Cambridge Structural Database},
	journal={Acta Crystallographica Section B-Structural Science Crystal Engineering and Materials},
	volume={72},
	pages={171-179},
	note={PT: J; NR: 57; TC: 6076; J9: ACTA CRYSTALLOGR B; PN: 2; PG: 9; GA: DJ1UI; UT: WOS:000373989900003},
	abstract={The Cambridge Structural Database (CSD) contains a complete record of all published organic and metal-organic small-molecule crystal structures. The database has been in operation for over 50 years and continues to be the primary means of sharing structural chemistry data and knowledge across disciplines. As well as structures that are made public to support scientific articles, it includes many structures published directly as CSD Communications. All structures are processed both computationally and by expert structural chemistry editors prior to entering the database. A key component of this processing is the reliable association of the chemical identity of the structure studied with the experimental data. This important step helps ensure that data is widely discoverable and readily reusable. Content is further enriched through selective inclusion of additional experimental data. Entries are available to anyone through free CSD community web services. Linking services developed and maintained by the CCDC, combined with the use of standard identifiers, facilitate discovery from other resources. Data can also be accessed through CCDC and third party software applications and through an application programming interface.},
	isbn={2052-5206},
	language={English},
	doi={10.1107/S2052520616003954}
}
@article{MessidorDatabase,
	author={Etienne Decenciere and Xiwei Zhang and Guy Cazuguel and Bruno Lay and Beatrice Cochener and Caroline Trone and Philippe Gain and John-Richard Ordonez-Varela and Pascale Massin and Ali Erginay and Beatrice Charton and Jean-Claude Klein},
	year={2014},
	title={Feedback on a Publicly Distributed Image Database: the Messidor Database},
	journal={Image Analysis & Stereology},
	volume={33},
	number={3},
	pages={231-234},
	note={PT: J; NR: 7; TC: 565; J9: IMAGE ANAL STEREOL; PG: 4; GA: AU2MP; UT: WOS:000345452800006},
	abstract={The Messidor database, which contains hundreds of eye fundus images, has been publicly distributed since 2008. It was created by the Messidor project in order to evaluate automatic lesion segmentation and diabetic retinopathy grading methods. Designing, producing and maintaining such a database entails significant costs. By publicly sharing it, one hopes to bring a valuable resource to the public research community. However, the real interest and benefit of the research community is not easy to quantify. We analyse here the feedback on the Messidor database, after more than 6 years of diffusion. This analysis should apply to other similar research databases.},
	isbn={1580-3139},
	language={English},
	doi={10.5566/ias.1155}
}
@article{MonadComprehensions,
	author={George Giorgidze and Torsten Grust and Nils Schweinsberg and Jeroen Weijers},
	year={2011},
	month={sep},
	title={Bringing Back Monad Comprehensions},
	journal={SIGPLAN Not.},
	volume={46},
	number={12},
	pages={13–22},
	abstract={This paper is about a Glasgow Haskell Compiler (GHC) extension that generalises Haskell's list comprehension notation to monads. The monad comprehension notation implemented by the extension supports generator and filter clauses, as was the case in the Haskell 1.4 standard. In addition, the extension generalises the recently proposed parallel and SQL-like list comprehension notations to monads. The aforementioned generalisations are formally defined in this paper. The extension will be available in GHC 7.2.This paper gives several instructive examples that we hope will facilitate wide adoption of the extension by the Haskell community. We also argue why the do notation is not always a good fit for monadic libraries and embedded domain-specific languages, especially for those that are based on collection monads. Should the question of how to integrate the extension into the Haskell standard arise, the paper proposes a solution to the problem that led to the removal of the monad comprehension notation from the language standard.},
	isbn={0362-1340},
	url={https://doi.org/10.1145/2096148.2034678},
	doi={10.1145/2096148.2034678}
}
@misc{GHCListComprehension,
	title={6.2.7. Generalised (SQL-like) List Comprehensions - Glasgow Haskell Compiler 9.7.20230125 User's Guide},
	volume={2023},
	number={26/01/},
	url={https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/generalised_list_comprehensions.html}
}
@inproceedings{ComprehensiveComprehensions,
	author={Simon Peyton Jones and Philip Wadler},
	year={2007},
	title={Comprehensive comprehensions},
	booktitle={Proceedings of the ACM SIGPLAN workshop on Haskell workshop},
	pages={61-72}
}
@book{BasicCategoryTheoryForCS,
	author={Benjamin C. Pierce},
	year={1991},
	title={Basic category theory for computer scientists},
	publisher={MIT Press},
	address={Cambridge, Massachusetts},
	note={Includes bibliographical references (p. 81-91) and index.; ID: alma991000237591701591},
	abstract={Category theory is a branch of pure mathematics that is becoming an increasingly important tool in theoretical computer science, especially in programming language semantics, domain theory, and concurrency, where it is already a standard language of discourse. Assuming a minimum of mathematical preparation, Basic Category Theory for Computer Scientists provides a straightforward presentation of the basic constructions and terminology of category theory, including limits, functors, natural transformations, adjoints, and cartesian closed categories. Four case studies illustrate applications of category theory to programming language design, semantics, and the solution of recursive domain equations. A brief literature survey offers suggestions for further study in more advanced texts. Benjamin C. Pierce received his doctoral degree from Carnegie Mellon University.Contents : Tutorial. Applications. Further Reading.},
	isbn={0262660717}
}
@InProceedings{CategoriesForModellingConcurrency,
author="Winskel, Glynn",
editor="Brookes, Stephen D.
and Roscoe, Andrew William
and Winskel, Glynn",
title="Categories of models for concurrency",
booktitle="Seminar on Concurrency",
year="1985",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="246--267",
isbn="978-3-540-39593-5"
}
@misc{HDBC,
title={HDBC-2.4.0.4: Haskell Database Connectivity},
url={https://hackage.haskell.org/package/HDBC-2.4.0.4/docs/Database-HDBC.html#g:2},
} 
% Check the referencing style (webpage)
@misc{Prelude,
	title={Standard types, classes and related functions},
	volume={2023},
	number={April 29th},
	url={https://hackage.haskell.org/package/base-4.18.0.0/docs/Prelude.html#g:3}
}
@article{PractitionersIntroduction,
	author={S. W. Dietrich and M. Brown and E. Cortes-Rello and S. Wunderlin},
	year={1992},
	title={A Practitioner's Introduction to Database Performance Benchmarks and Measurements},
	journal={The Computer Journal},
	volume={35},
	number={4},
	pages={322-331},
	abstract={Database performance benchmarks provide an important measure for the comparison of database management systems. This paper provides an introduction to performance benchmarks for centralised databases. The introduction includes benchmarks for transaction processing, such as DebitCredit, TPC-A and TPC-B, and benchmarks for decision support, such as the Wisconsin benchmark and its extension by Bull to a vendor benchmark, known as the Single-User Decision Support benchmark. An important contribution of this paper is a practitioner's perspective of the issues involved in performance measurement.},
	isbn={0010-4620},
	url={https://doi.org/10.1093/comjnl/35.4.322},
	doi={10.1093/comjnl/35.4.322}
}
@misc{TPC-OLTP,
	title={On-Line Transaction Processing
},
	volume={2023},
	number={31st May},
	url={https://www.tpc.org/tpc-bm-categories/oltp5.asp}
}
@book{ComputerScienceDictionary,
	author={Andrew Butterfield and Gerard Ekembe Ngondi},
	year={2016},
	title={A Dictionary of Computer Science},
	publisher={Oxford University Press},
	address={Oxford, England},
	edition={7},
	note={ID: alma991000366896101591},
	abstract={Providing comprehensive coverage of computer applications in industry, school, work, education, and the home, this fully revised dictionary is the ideal reference for students, professionals, and anyone who uses computers.},
	keywords={Computer science$$QComputer science -- Dictionaries},
	isbn={0-19-100288-7},
	url={http://www.oxfordreference.com/view/10.1093/acref/9780199688975.001.0001/acref-9780199688975},
	doi={10.1093/acref/9780199688975.001.0001}
}
@inproceedings{Wisconsin,
	author={Dina Bitton and David J. DeWitt and Carolyn Turbyfill},
	year={1983},
	title={Benchmarking Database Systems A Systematic Approach},
	booktitle={Proceedings of the 9th International Conference on Very Large Data Bases},
	series={VLDB '83},
	publisher={Morgan Kaufmann Publishers Inc},
	address={San Francisco, CA, USA},
	pages={8–19},
	isbn={0934-61315X}
}
