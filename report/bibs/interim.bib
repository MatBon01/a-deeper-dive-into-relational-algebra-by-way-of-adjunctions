@article{RelationalAlgebraByWayOfAdjunctions,
	author={Jeremy Gibbons and Fritz Henglein and Ralf Hinze and Nicolas Wu},
	year={2018},
	month={Jul 30,},
	title={Relational algebra by way of adjunctions},
	journal={Proceedings of ACM on programming languages},
	volume={2},
	number={ICFP},
	pages={1-28},
	abstract={Bulk types such as sets, bags, and lists are monads, and therefore support a notation for database queries based on comprehensions. This fact is the basis of much work on database query languages. The monadic structure easily explains most of standard relational algebra---specifically, selections and projections---allowing for an elegant mathematical foundation for those aspects of database query language design. Most, but not all: monads do not immediately offer an explanation of relational join or grouping, and hence important foundations for those crucial aspects of relational algebra are missing. The best they can offer is cartesian product followed by selection. Adjunctions come to the rescue: like any monad, bulk types also arise from certain adjunctions; we show that by paying due attention to other important adjunctions, we can elegantly explain the rest of standard relational algebra. In particular, graded monads provide a mathematical foundation for indexing and grouping, which leads directly to an efficient implementation, even of joins.},
	isbn={2475-1421},
	url={http://dl.acm.org/citation.cfm?id=3236781},
	doi={10.1145/3236781}
}
@book{DatabaseSystems,
	author={Hector Garcia-Molina and Jeffrey Ullman and Jennifer Widom},
	year={2013},
	title={Database Systems : the Complete Book},
	publisher={Pearson Education UK},
	address={Harlow, Essex, England},
	edition={Second, Pearson New International edition.},
	abstract={For Database Systems and Database Design and Application courses offered at the junior, senior and graduate levels in Computer Science departments. Written by well-known computer scientists, this introduction to database systems offers a comprehensive approach, focusing on database design, database use, and implementation of database applications and database management systems. The first half of the book provides in-depth coverage of databases from the point of view of the database designer, user, and application programmer. It covers the latest database standards SQL:1999, SQL/PSM, SQL/CLI, JDBC, ODL, and XML, with broader coverage of SQL than most other texts. The second half of the book provides in-depth coverage of databases from the point of view of the DBMS implementor. It focuses on storage structures, query processing, and transaction management. The book covers the main techniques in these areas with broader coverage of query optimization than most other texts, along with advanced topics including multidimensional and bitmap indexes, distributed transactions, and information integration techniques.&nbsp;},
	isbn={9781292037301}
}
@inproceedings{RelationalCalculus,
	author={E. F. Codd},
	year={1971},
	title={A Data Base Sublanguage Founded on the Relational Calculus},
	booktitle={Proceedings of the 1971 ACM SIGFIDET (Now SIGMOD) Workshop on Data Description, Access and Control},
	series={SIGFIDET '71},
	publisher={Association for Computing Machinery},
	address={New York, NY, USA},
	location={San Diego, California},
	pages={35–68},
	abstract={Three principal types of language for data base manipulation are identified: the low-level, procedure-oriented (typified by the CODASYL-proposed DML), the intermediate level, algebraic (typified by the Project MAC MacAIMS language), and the high level, relational calculus-based data sublanguage, an example of which is described in this paper. The language description is informal and stresses concepts and principles. Following this, arguments are presented for the superiority of the calculus-based type of data base sub-language over the algebraic, and for the algebraic over the low-level procedural. These arguments are particularly relevant to the questions of inter-system compatibility and standardization.},
	isbn={9781-450373005},
	url={https://doi.org/10.1145/1734714.1734718},
	doi={10.1145/1734714.1734718}
}
@article{RelationalModel,
	author={E. F. Codd},
	year={1970},
	month={jun},
	title={A Relational Model of Data for Large Shared Data Banks},
	journal={Commun.ACM},
	volume={13},
	number={6},
	pages={377–387},
	abstract={Future users of large data banks must be protected from having to know how the data is organized in the machine (the internal representation). A prompting service which supplies such information is not a satisfactory solution. Activities of users at terminals and most application programs should remain unaffected when the internal representation of data is changed and even when some aspects of the external representation are changed. Changes in data representation will often be needed as a result of changes in query, update, and report traffic and natural growth in the types of stored information.Existing noninferential, formatted data systems provide users with tree-structured files or slightly more general network models of the data. In Section 1, inadequacies of these models are discussed. A model based on n-ary relations, a normal form for data base relations, and the concept of a universal data sublanguage are introduced. In Section 2, certain operations on relations (other than logical inference) are discussed and applied to the problems of redundancy and consistency in the user's model.},
	isbn={0001-0782},
	url={https://doi.org/10.1145/362384.362685},
	doi={10.1145/362384.362685}
}
@article{JoinProcessing,
	author={Priti Mishra and Margaret H. Eich},
	year={1992},
	month={mar},
	title={Join Processing in Relational Databases},
	journal={ACM Comput.Surv.},
	volume={24},
	number={1},
	pages={63–113},
	abstract={The join operation is one of the fundamental relational database query operations. It facilitates the retrieval of information from two different relations based on a Cartesian product of the two relations. The join is one of the most diffidult operations to implement efficiently, as no predefined links between relations are required to exist (as they are with network and hierarchical systems). The join is the only relational algebra operation that allows the combining of related tuples from relations on different attribute schemes. Since it is executed frequently and is expensive, much research effort has been applied to the optimization of join processing. In this paper, the different kinds of joins and the various implementation techniques are surveyed. These different methods are classified based on how they partition tuples from different relations. Some require that all tuples from one be compared to all tuples from another; other algorithms only compare some tuples from each. In addition, some techniques perform an explicit partitioning, whereas others are implicit.},
	isbn={0360-0300},
	url={https://doi.org/10.1145/128762.128764},
	doi={10.1145/128762.128764}
}